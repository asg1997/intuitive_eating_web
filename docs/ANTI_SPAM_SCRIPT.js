// –£–ª—É—á—à–µ–Ω–Ω—ã–π Google Apps Script —Å –∑–∞—â–∏—Ç–æ–π –æ—Ç —Å–ø–∞–º–∞
// –ó–∞–º–µ–Ω–∏—Ç–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –≤–∞—à–µ–≥–æ —Å–∫—Ä–∏–ø—Ç–∞ –Ω–∞ —ç—Ç–æ—Ç –∫–æ–¥

function doPost(e) {
    try {
        const sheet = SpreadsheetApp.getActiveSpreadsheet().getActiveSheet();

        // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        const email = e.parameter.email;
        const timestamp = e.parameter.timestamp || new Date().toISOString();
        const source = e.parameter.source || 'unknown';
        const userAgent = e.parameter.userAgent || 'unknown';
        const ipAddress = e.parameter.ipAddress || 'unknown';

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
        if (!email || email.trim() === '') {
            return createResponse('error', 'Email is required');
        }

        // –í–∞–ª–∏–¥–∞—Ü–∏—è email
        const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
        if (!emailRegex.test(email)) {
            return createResponse('error', 'Invalid email format');
        }

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã
        const suspiciousPatterns = [
            /test\d*@/i,           // test@, test1@, test123@
            /spam/i,               // —Å–æ–¥–µ—Ä–∂–∏—Ç "spam"
            /fake/i,               // —Å–æ–¥–µ—Ä–∂–∏—Ç "fake"
            /bot/i,                // —Å–æ–¥–µ—Ä–∂–∏—Ç "bot"
            /admin@/i,             // admin@
            /noreply@/i,           // noreply@
            /no-reply@/i,          // no-reply@
            /temp@/i,              // temp@
            /temporary@/i          // temporary@
        ];

        for (let pattern of suspiciousPatterns) {
            if (pattern.test(email)) {
                logSuspiciousActivity(email, 'Suspicious email pattern', ipAddress);
                return createResponse('error', 'Invalid email');
            }
        }

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –¥—É–±–ª–∏–∫–∞—Ç—ã
        const data = sheet.getDataRange().getValues();
        for (let i = 1; i < data.length; i++) {
            if (data[i][0] === email) {
                return createResponse('duplicate', 'Email already subscribed');
            }
        }

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ —á–∞—Å—Ç–æ—Ç—ã –∑–∞–ø—Ä–æ—Å–æ–≤ —Å –æ–¥–Ω–æ–≥–æ IP (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 –º–∏–Ω—É—Ç)
        const recentRequests = checkRecentRequests(ipAddress, 10); // 10 –º–∏–Ω—É—Ç
        if (recentRequests >= 5) { // –º–∞–∫—Å–∏–º—É–º 5 –∑–∞–ø—Ä–æ—Å–æ–≤ –∑–∞ 10 –º–∏–Ω—É—Ç
            logSuspiciousActivity(email, 'Too many requests from IP', ipAddress);
            return createResponse('error', 'Too many requests');
        }

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ–º–µ–Ω–∞ email
        const emailDomain = email.split('@')[1];
        const suspiciousDomains = [
            '10minutemail.com',
            'tempmail.org',
            'guerrillamail.com',
            'mailinator.com',
            'yopmail.com'
        ];

        if (suspiciousDomains.includes(emailDomain.toLowerCase())) {
            logSuspiciousActivity(email, 'Suspicious email domain', ipAddress);
            return createResponse('error', 'Invalid email domain');
        }

        // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
        const rowData = [
            email,
            timestamp,
            source,
            ipAddress,
            userAgent,
            'normal' // —Å—Ç–∞—Ç—É—Å: normal, suspicious, blocked
        ];

        sheet.appendRow(rowData);

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–æ–≤–æ–π –ø–æ–¥–ø–∏—Å–∫–µ
        sendEmailNotification(email, timestamp, ipAddress);

        return createResponse('success', 'Email subscribed successfully', sheet.getLastRow());

    } catch (error) {
        Logger.log('Error: ' + error.toString());
        return createResponse('error', 'Internal server error');
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞
function createResponse(result, message, data = null) {
    const response = { result: result, message: message };
    if (data) response.data = data;

    return ContentService
        .createTextOutput(JSON.stringify(response))
        .setMimeType(ContentService.MimeType.JSON);
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ–¥–∞–≤–Ω–∏—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ —Å IP
function checkRecentRequests(ipAddress, minutesBack) {
    const sheet = SpreadsheetApp.getActiveSpreadsheet().getActiveSheet();
    const data = sheet.getDataRange().getValues();
    const cutoffTime = new Date(Date.now() - minutesBack * 60 * 1000);

    let count = 0;
    for (let i = 1; i < data.length; i++) {
        const rowTime = new Date(data[i][1]); // timestamp –≤ –∫–æ–ª–æ–Ω–∫–µ B
        const rowIP = data[i][3]; // IP –≤ –∫–æ–ª–æ–Ω–∫–µ D

        if (rowIP === ipAddress && rowTime > cutoffTime) {
            count++;
        }
    }

    return count;
}

// –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
function logSuspiciousActivity(email, reason, ipAddress) {
    const sheet = SpreadsheetApp.getActiveSpreadsheet().getActiveSheet();
    const timestamp = new Date().toISOString();

    // –î–æ–±–∞–≤–ª—è–µ–º –≤ –∫–æ–Ω–µ—Ü —Ç–∞–±–ª–∏—Ü—ã —Å –ø–æ–º–µ—Ç–∫–æ–π "suspicious"
    sheet.appendRow([
        email,
        timestamp,
        'suspicious_activity',
        ipAddress,
        'unknown',
        'suspicious',
        reason // –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∫–æ–ª–æ–Ω–∫–∞ —Å –ø—Ä–∏—á–∏–Ω–æ–π
    ]);

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
    sendSuspiciousActivityAlert(email, reason, ipAddress);
}

// –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–æ–≤–æ–π –ø–æ–¥–ø–∏—Å–∫–µ
function sendEmailNotification(email, timestamp, ipAddress) {
    const recipient = 'asg1997@yandex.ru'; // –í–∞—à email
    const subject = 'üéâ –ù–æ–≤–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫—É!';
    const body = `
–ù–æ–≤—ã–π –ø–æ–¥–ø–∏—Å—á–∏–∫:
Email: ${email}
–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è: ${new Date(timestamp).toLocaleString('ru-RU')}
IP-–∞–¥—Ä–µ—Å: ${ipAddress}

–í—Å–µ–≥–æ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤: ${SpreadsheetApp.getActiveSpreadsheet().getActiveSheet().getLastRow() - 1}
`;

    try {
        MailApp.sendEmail(recipient, subject, body);
    } catch (error) {
        Logger.log('Failed to send email notification: ' + error.toString());
    }
}

// –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
function sendSuspiciousActivityAlert(email, reason, ipAddress) {
    const recipient = 'asg1997@yandex.ru'; // –í–∞—à email
    const subject = '‚ö†Ô∏è –ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –Ω–∞ —Å–∞–π—Ç–µ';
    const body = `
–û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å:

Email: ${email}
–ü—Ä–∏—á–∏–Ω–∞: ${reason}
IP-–∞–¥—Ä–µ—Å: ${ipAddress}
–í—Ä–µ–º—è: ${new Date().toLocaleString('ru-RU')}

–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ª–æ–≥–∏.
`;

    try {
        MailApp.sendEmail(recipient, subject, body);
    } catch (error) {
        Logger.log('Failed to send suspicious activity alert: ' + error.toString());
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Å–ø–∞–º–∞ (–º–æ–∂–Ω–æ –∑–∞–ø—É—Å–∫–∞—Ç—å –≤—Ä—É—á–Ω—É—é)
function analyzeSpam() {
    const sheet = SpreadsheetApp.getActiveSpreadsheet().getActiveSheet();
    const data = sheet.getDataRange().getValues();

    let stats = {
        total: 0,
        suspicious: 0,
        normal: 0,
        duplicates: 0,
        topDomains: {},
        topIPs: {}
    };

    const emails = new Set();

    for (let i = 1; i < data.length; i++) {
        const email = data[i][0];
        const status = data[i][5] || 'normal';
        const ip = data[i][3];
        const domain = email.split('@')[1];

        stats.total++;

        if (emails.has(email)) {
            stats.duplicates++;
        } else {
            emails.add(email);
        }

        if (status === 'suspicious') {
            stats.suspicious++;
        } else {
            stats.normal++;
        }

        // –ü–æ–¥—Å—á–µ—Ç –¥–æ–º–µ–Ω–æ–≤
        stats.topDomains[domain] = (stats.topDomains[domain] || 0) + 1;

        // –ü–æ–¥—Å—á–µ—Ç IP
        if (ip && ip !== 'unknown') {
            stats.topIPs[ip] = (stats.topIPs[ip] || 0) + 1;
        }
    }

    // –í—ã–≤–æ–¥–∏–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    Logger.log('=== –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ü–û–î–ü–ò–°–û–ö ===');
    Logger.log(`–í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π: ${stats.total}`);
    Logger.log(`–ù–æ—Ä–º–∞–ª—å–Ω—ã—Ö: ${stats.normal}`);
    Logger.log(`–ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã—Ö: ${stats.suspicious}`);
    Logger.log(`–î—É–±–ª–∏–∫–∞—Ç–æ–≤: ${stats.duplicates}`);

    Logger.log('\n=== –¢–û–ü-10 –î–û–ú–ï–ù–û–í ===');
    const sortedDomains = Object.entries(stats.topDomains)
        .sort(([, a], [, b]) => b - a)
        .slice(0, 10);

    sortedDomains.forEach(([domain, count]) => {
        Logger.log(`${domain}: ${count}`);
    });

    Logger.log('\n=== –¢–û–ü-10 IP –ê–î–†–ï–°–û–í ===');
    const sortedIPs = Object.entries(stats.topIPs)
        .sort(([, a], [, b]) => b - a)
        .slice(0, 10);

    sortedIPs.forEach(([ip, count]) => {
        Logger.log(`${ip}: ${count}`);
    });

    return stats;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π
function cleanSuspiciousRecords() {
    const sheet = SpreadsheetApp.getActiveSpreadsheet().getActiveSheet();
    const data = sheet.getDataRange().getValues();

    let deletedCount = 0;

    // –ü—Ä–æ—Ö–æ–¥–∏–º —Å –∫–æ–Ω—Ü–∞, —á—Ç–æ–±—ã –Ω–µ —Å–±–∏—Ç—å –∏–Ω–¥–µ–∫—Å—ã –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏
    for (let i = data.length - 1; i >= 1; i--) {
        const status = data[i][5];
        if (status === 'suspicious') {
            sheet.deleteRow(i + 1); // +1 –ø–æ—Ç–æ–º—É —á—Ç–æ –∏–Ω–¥–µ–∫—Å—ã –≤ Sheets –Ω–∞—á–∏–Ω–∞—é—Ç—Å—è —Å 1
            deletedCount++;
        }
    }

    Logger.log(`–£–¥–∞–ª–µ–Ω–æ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π: ${deletedCount}`);
    return deletedCount;
}
