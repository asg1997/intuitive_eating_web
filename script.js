// Intersection Observer –¥–ª—è –∞–Ω–∏–º–∞—Ü–∏–π –ø—Ä–∏ —Å–∫—Ä–æ–ª–ª–µ
const observerOptions = {
    threshold: 0.1,
    rootMargin: '0px 0px -50px 0px'
};

const observer = new IntersectionObserver((entries) => {
    entries.forEach(entry => {
        if (entry.isIntersecting) {
            entry.target.classList.add('visible');
        }
    });
}, observerOptions);

// –ù–∞–±–ª—é–¥–∞–µ–º –∑–∞ –≤—Å–µ–º–∏ —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏ —Å –∫–ª–∞—Å—Å–æ–º fade-in-up
document.addEventListener('DOMContentLoaded', () => {
    const fadeElements = document.querySelectorAll('.fade-in-up');
    fadeElements.forEach(el => observer.observe(el));
});

// FAQ –∞–∫–∫–æ—Ä–¥–µ–æ–Ω
const faqItems = document.querySelectorAll('.faq-item');

faqItems.forEach(item => {
    const question = item.querySelector('.faq-question');

    question.addEventListener('click', () => {
        const isActive = item.classList.contains('active');

        // –ó–∞–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ –æ—Ç–∫—Ä—ã—Ç—ã–µ FAQ
        faqItems.forEach(faqItem => {
            faqItem.classList.remove('active');
        });

        // –û—Ç–∫—Ä—ã–≤–∞–µ–º —Ç–µ–∫—É—â–∏–π, –µ—Å–ª–∏ –æ–Ω –±—ã–ª –∑–∞–∫—Ä—ã—Ç
        if (!isActive) {
            item.classList.add('active');

            // –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º –æ—Ç–∫—Ä—ã—Ç–∏–µ FAQ –≤ –Ø–Ω–¥–µ–∫—Å.–ú–µ—Ç—Ä–∏–∫–µ
            const questionText = question.querySelector('span').textContent;
            if (typeof ym !== 'undefined') {
                ym(104428361, 'reachGoal', 'faq_opened', {
                    question: questionText
                });
            }
            console.log('üìä FAQ –æ—Ç–∫—Ä—ã—Ç:', questionText);
        }
    });
});

// –ü–ª–∞–≤–Ω–∞—è –ø—Ä–æ–∫—Ä—É—Ç–∫–∞ –¥–ª—è —è–∫–æ—Ä–Ω—ã—Ö —Å—Å—ã–ª–æ–∫
document.querySelectorAll('a[href^="#"]').forEach(anchor => {
    anchor.addEventListener('click', function (e) {
        e.preventDefault();
        const targetId = this.getAttribute('href');

        if (targetId === '#') return;

        const targetElement = document.querySelector(targetId);

        if (targetElement) {
            const navHeight = document.querySelector('.nav').offsetHeight;
            const targetPosition = targetElement.offsetTop - navHeight - 20;

            window.scrollTo({
                top: targetPosition,
                behavior: 'smooth'
            });

            // –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º –Ω–∞–≤–∏–≥–∞—Ü–∏—é –ø–æ —Ä–∞–∑–¥–µ–ª–∞–º –≤ –Ø–Ω–¥–µ–∫—Å.–ú–µ—Ç—Ä–∏–∫–µ
            if (typeof ym !== 'undefined') {
                ym(104428361, 'reachGoal', 'section_navigation', {
                    section: targetId.replace('#', '')
                });
            }
            console.log('üìä –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Ä–∞–∑–¥–µ–ª—É:', targetId);
        }
    });
});

// –ò–∑–º–µ–Ω–µ–Ω–∏–µ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø—Ä–∏ —Å–∫—Ä–æ–ª–ª–µ
let lastScroll = 0;
const nav = document.querySelector('.nav');

window.addEventListener('scroll', () => {
    const currentScroll = window.pageYOffset;

    // –î–æ–±–∞–≤–ª—è–µ–º –∫–ª–∞—Å—Å .scrolled –∫–æ–≥–¥–∞ –ø—Ä–æ–∫—Ä—É—Ç–∏–ª–∏ –±–æ–ª—å—à–µ 50px
    if (currentScroll > 50) {
        nav.classList.add('scrolled');
    } else {
        nav.classList.remove('scrolled');
    }

    lastScroll = currentScroll;
});


// –ê–Ω–∏–º–∞—Ü–∏—è —Å—á–µ—Ç—á–∏–∫–∞ (–º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Ä–µ–∞–ª—å–Ω—ã–µ —Ü–∏—Ñ—Ä—ã)
function animateValue(element, start, end, duration) {
    let startTimestamp = null;
    const step = (timestamp) => {
        if (!startTimestamp) startTimestamp = timestamp;
        const progress = Math.min((timestamp - startTimestamp) / duration, 1);
        element.textContent = Math.floor(progress * (end - start) + start);
        if (progress < 1) {
            window.requestAnimationFrame(step);
        }
    };
    window.requestAnimationFrame(step);
}

// –ê–Ω–∏–º–∞—Ü–∏—è —Ä–µ—á–µ–≤—ã—Ö –ø—É–∑—ã—Ä–µ–π —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞ —á–µ—Ä–µ–∑ CSS
// –ù–∏–∫–∞–∫–æ–≥–æ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ JavaScript –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è

// –î–æ–±–∞–≤–ª–µ–Ω–∏–µ ripple-—ç—Ñ—Ñ–µ–∫—Ç–∞ –¥–ª—è –∫–Ω–æ–ø–æ–∫
const buttons = document.querySelectorAll('.btn');

buttons.forEach(button => {
    button.addEventListener('click', function (e) {
        const ripple = document.createElement('span');
        const rect = this.getBoundingClientRect();
        const size = Math.max(rect.width, rect.height);
        const x = e.clientX - rect.left - size / 2;
        const y = e.clientY - rect.top - size / 2;

        ripple.style.width = ripple.style.height = size + 'px';
        ripple.style.left = x + 'px';
        ripple.style.top = y + 'px';
        ripple.classList.add('ripple');

        this.appendChild(ripple);

        setTimeout(() => ripple.remove(), 600);

        // –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º –∫–ª–∏–∫–∏ –ø–æ –∫–Ω–æ–ø–∫–∞–º "–£–∑–Ω–∞—Ç—å –æ –∑–∞–ø—É—Å–∫–µ"
        const buttonText = this.textContent.trim();
        if (buttonText.includes('–£–∑–Ω–∞—Ç—å') || buttonText.includes('–∑–∞–ø—É—Å–∫')) {
            if (typeof ym !== 'undefined') {
                ym(104428361, 'reachGoal', 'click_subscribe_button', {
                    button_text: buttonText,
                    button_location: this.closest('section')?.id || 'header'
                });
            }
            console.log('üìä –ö–ª–∏–∫ –Ω–∞ –∫–Ω–æ–ø–∫—É –ø–æ–¥–ø–∏—Å–∫–∏:', buttonText);
        }
    });
});

// –î–æ–±–∞–≤–ª—è–µ–º CSS –¥–ª—è ripple-—ç—Ñ—Ñ–µ–∫—Ç–∞ –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏
const style = document.createElement('style');
style.textContent = `
    .btn {
        position: relative;
        overflow: hidden;
    }
    
    .ripple {
        position: absolute;
        border-radius: 50%;
        background: rgba(255, 255, 255, 0.6);
        transform: scale(0);
        animation: ripple-animation 0.6s ease-out;
        pointer-events: none;
    }
    
    @keyframes ripple-animation {
        to {
            transform: scale(4);
            opacity: 0;
        }
    }
`;
document.head.appendChild(style);

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ä–º—ã –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ email
const emailForm = document.getElementById('emailForm');

if (emailForm) {
    emailForm.addEventListener('submit', function (e) {
        e.preventDefault();

        const emailInput = this.querySelector('.email-input');
        const email = emailInput.value;
        const submitBtn = this.querySelector('button[type="submit"]');

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏
        submitBtn.textContent = '–ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º...';
        submitBtn.disabled = true;

        // –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –≤–∞—à–∏–º —Å–µ—Ä–≤–∏—Å–æ–º email-—Ä–∞—Å—Å—ã–ª–∫–∏
        // –ù–∞–ø—Ä–∏–º–µ—Ä: Mailchimp, SendPulse, GetResponse –∏ —Ç.–¥.

        // –ò–º–∏—Ç–∞—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ (–∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π API)
        setTimeout(() => {
            // –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º –ø–æ–¥–ø–∏—Å–∫—É –≤ –Ø–Ω–¥–µ–∫—Å.–ú–µ—Ç—Ä–∏–∫–µ
            if (typeof ym !== 'undefined') {
                ym(104428361, 'reachGoal', 'email_subscription', {
                    source: 'main_page',
                    email_domain: email.split('@')[1]
                });
            }
            console.log('üìä Email –ø–æ–¥–ø–∏—Å–∫–∞:', email);

            // –°–æ–∑–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ
            const successMessage = document.createElement('div');
            successMessage.className = 'form-success';
            successMessage.textContent = '‚úì –°–ø–∞—Å–∏–±–æ! –í—ã –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫—É';

            // –£–¥–∞–ª—è–µ–º —Ñ–æ—Ä–º—É –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            this.style.display = 'none';
            this.parentElement.insertBefore(successMessage, this.nextSibling);

            // –ú–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –Ω–∞ —Å–µ—Ä–≤–µ—Ä
            console.log('Email –ø–æ–¥–ø–∏—Å–∞–Ω:', email);

            // –ü—Ä–∏–º–µ—Ä –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞ —Å–µ—Ä–≤–µ—Ä (—Ä–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä—É–π—Ç–µ –∏ –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ):
            /*
            fetch('/api/subscribe', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({ email: email })
            })
            .then(response => response.json())
            .then(data => {
                console.log('Success:', data);
            })
            .catch((error) => {
                console.error('Error:', error);
            });
            */

        }, 1000);
    });
}

// ========================================
// –ö–∞—Ä—É—Å–µ–ª—å –∏—Å—Ç–æ—Ä–∏–π
// ========================================

class StoryCarousel {
    constructor() {
        this.currentSlide = 0;
        this.slides = document.querySelectorAll('.story-slide');
        this.prevBtn = document.getElementById('prevBtn');
        this.nextBtn = document.getElementById('nextBtn');
        this.dotsContainer = document.getElementById('carouselDots');
        this.touchStartX = 0;
        this.touchEndX = 0;

        if (!this.slides.length) return;

        this.init();
    }

    init() {
        // –°–æ–∑–¥–∞–µ–º —Ç–æ—á–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
        this.createDots();

        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–Ω–æ–ø–æ–∫
        this.prevBtn.addEventListener('click', () => this.prevSlide());
        this.nextBtn.addEventListener('click', () => this.nextSlide());

        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Ç–æ—á–µ–∫
        const dots = this.dotsContainer.querySelectorAll('.carousel-dot');
        dots.forEach((dot, index) => {
            dot.addEventListener('click', () => this.goToSlide(index));
        });

        // –ö–ª–∞–≤–∏–∞—Ç—É—Ä–Ω–∞—è –Ω–∞–≤–∏–≥–∞—Ü–∏—è
        document.addEventListener('keydown', (e) => {
            if (e.key === 'ArrowLeft') this.prevSlide();
            if (e.key === 'ArrowRight') this.nextSlide();
        });

        // –ü–æ–¥–¥–µ—Ä–∂–∫–∞ —Å–≤–∞–π–ø–æ–≤ –Ω–∞ –º–æ–±–∏–ª—å–Ω—ã—Ö
        const carousel = document.getElementById('storyCarousel');
        carousel.addEventListener('touchstart', (e) => {
            this.touchStartX = e.changedTouches[0].screenX;
        });

        carousel.addEventListener('touchend', (e) => {
            this.touchEndX = e.changedTouches[0].screenX;
            this.handleSwipe();
        });

        // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        this.updateCarousel();
    }

    createDots() {
        this.slides.forEach((_, index) => {
            const dot = document.createElement('button');
            dot.className = 'carousel-dot';
            dot.setAttribute('aria-label', `–ü–µ—Ä–µ–π—Ç–∏ –∫ –∏—Å—Ç–æ—Ä–∏–∏ ${index + 1}`);
            if (index === 0) dot.classList.add('active');
            this.dotsContainer.appendChild(dot);
        });
    }

    goToSlide(index) {
        if (index < 0 || index >= this.slides.length) return;

        this.currentSlide = index;
        this.updateCarousel();

        // –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º –Ω–∞–≤–∏–≥–∞—Ü–∏—é –ø–æ –∏—Å—Ç–æ—Ä–∏—è–º –≤ –Ø–Ω–¥–µ–∫—Å.–ú–µ—Ç—Ä–∏–∫–µ
        if (typeof ym !== 'undefined') {
            const storyTime = this.slides[index].querySelector('.time-label')?.textContent || `–ò—Å—Ç–æ—Ä–∏—è ${index + 1}`;
            ym(104428361, 'reachGoal', 'story_navigation', {
                story_index: index,
                story_time: storyTime
            });
        }
    }

    nextSlide() {
        if (this.currentSlide < this.slides.length - 1) {
            this.currentSlide++;
            this.updateCarousel();
        }
    }

    prevSlide() {
        if (this.currentSlide > 0) {
            this.currentSlide--;
            this.updateCarousel();
        }
    }

    handleSwipe() {
        const swipeThreshold = 50;
        const diff = this.touchStartX - this.touchEndX;

        if (Math.abs(diff) > swipeThreshold) {
            if (diff > 0) {
                // –°–≤–∞–π–ø –≤–ª–µ–≤–æ - —Å–ª–µ–¥—É—é—â–∏–π —Å–ª–∞–π–¥
                this.nextSlide();
            } else {
                // –°–≤–∞–π–ø –≤–ø—Ä–∞–≤–æ - –ø—Ä–µ–¥—ã–¥—É—â–∏–π —Å–ª–∞–π–¥
                this.prevSlide();
            }
        }
    }

    updateCarousel() {
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ª–∞–π–¥—ã
        this.slides.forEach((slide, index) => {
            slide.classList.remove('active');
            if (index === this.currentSlide) {
                slide.classList.add('active');
            }
        });

        // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ—á–∫–∏
        const dots = this.dotsContainer.querySelectorAll('.carousel-dot');
        dots.forEach((dot, index) => {
            dot.classList.remove('active');
            if (index === this.currentSlide) {
                dot.classList.add('active');
            }
        });

        // –û–±–Ω–æ–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏
        this.prevBtn.disabled = this.currentSlide === 0;
        this.nextBtn.disabled = this.currentSlide === this.slides.length - 1;
    }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–∞—Ä—É—Å–µ–ª–∏ –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ DOM
document.addEventListener('DOMContentLoaded', () => {
    new StoryCarousel();
    new FeaturesCarousel();
});

// ========================================
// –ö–∞—Ä—É—Å–µ–ª—å —Ñ—É–Ω–∫—Ü–∏–π –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
// ========================================

class FeaturesCarousel {
    constructor() {
        this.carousel = document.getElementById('featuresCarousel');
        this.prevBtn = document.getElementById('featuresPrevBtn');
        this.nextBtn = document.getElementById('featuresNextBtn');
        this.dotsContainer = document.getElementById('featuresDots');
        this.slides = document.querySelectorAll('.feature-slide');
        this.currentIndex = 0;
        this.touchStartX = 0;
        this.touchEndX = 0;
        this.scrollTimeout = null;

        if (!this.carousel || !this.slides.length) return;

        this.init();
    }

    init() {
        // –°–æ–∑–¥–∞–µ–º —Ç–æ—á–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
        this.createDots();

        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–Ω–æ–ø–æ–∫
        this.prevBtn.addEventListener('click', () => this.scrollPrev());
        this.nextBtn.addEventListener('click', () => this.scrollNext());

        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–æ–∫—Ä—É—Ç–∫–∏ –∫–∞—Ä—É—Å–µ–ª–∏ —Å debounce
        this.carousel.addEventListener('scroll', () => {
            clearTimeout(this.scrollTimeout);
            this.scrollTimeout = setTimeout(() => this.updateActiveSlide(), 50);
        });

        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Ç–æ—á–µ–∫
        const dots = this.dotsContainer.querySelectorAll('.features-dot');
        dots.forEach((dot, index) => {
            dot.addEventListener('click', () => this.scrollToSlide(index));
        });

        // –ü–æ–¥–¥–µ—Ä–∂–∫–∞ —Å–≤–∞–π–ø–æ–≤ –Ω–∞ –º–æ–±–∏–ª—å–Ω—ã—Ö
        this.carousel.addEventListener('touchstart', (e) => {
            this.touchStartX = e.changedTouches[0].screenX;
        });

        this.carousel.addEventListener('touchend', (e) => {
            this.touchEndX = e.changedTouches[0].screenX;
            this.handleSwipe();
        });

        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
        this.updateActiveSlide();
    }

    createDots() {
        // –°–æ–∑–¥–∞–µ–º 4 —Ç–æ—á–∫–∏ –¥–ª—è 4 —Å—Ç—Ä–∞–Ω–∏—Ü (6 —Å–ª–∞–π–¥–æ–≤ - 3 –≤–∏–¥–∏–º—ã—Ö + 1 = 4 —Å—Ç—Ä–∞–Ω–∏—Ü—ã)
        const totalPages = 4;
        for (let i = 0; i < totalPages; i++) {
            const dot = document.createElement('button');
            dot.className = 'features-dot';
            dot.setAttribute('aria-label', `–ü–µ—Ä–µ–π—Ç–∏ –∫ —Å—Ç—Ä–∞–Ω–∏—Ü–µ ${i + 1}`);
            if (i === 0) dot.classList.add('active');
            this.dotsContainer.appendChild(dot);
        }
    }

    scrollToSlide(pageIndex) {
        // –°—Ç—Ä–∞–Ω–∏—Ü–∞ 0 -> —Å–ª–∞–π–¥ 0, —Å—Ç—Ä–∞–Ω–∏—Ü–∞ 1 -> —Å–ª–∞–π–¥ 1, –∏ —Ç.–¥.
        const slide = this.slides[pageIndex];
        if (slide) {
            const scrollLeft = slide.offsetLeft - parseInt(getComputedStyle(this.carousel).paddingLeft);
            this.carousel.scrollTo({
                left: scrollLeft,
                behavior: 'smooth'
            });

            // –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º –Ω–∞–≤–∏–≥–∞—Ü–∏—é –ø–æ —Ñ—É–Ω–∫—Ü–∏—è–º –≤ –Ø–Ω–¥–µ–∫—Å.–ú–µ—Ç—Ä–∏–∫–µ
            if (typeof ym !== 'undefined') {
                const featureName = slide.querySelector('h3')?.textContent || `–§—É–Ω–∫—Ü–∏—è ${pageIndex + 1}`;
                ym(104428361, 'reachGoal', 'feature_carousel_navigation', {
                    page_index: pageIndex,
                    feature_name: featureName
                });
            }
        }
    }

    scrollNext() {
        const slideWidth = this.slides[0].offsetWidth;
        const gap = parseInt(getComputedStyle(this.carousel).gap);
        this.carousel.scrollBy({
            left: slideWidth + gap,
            behavior: 'smooth'
        });
    }

    scrollPrev() {
        const slideWidth = this.slides[0].offsetWidth;
        const gap = parseInt(getComputedStyle(this.carousel).gap);
        this.carousel.scrollBy({
            left: -(slideWidth + gap),
            behavior: 'smooth'
        });
    }

    handleSwipe() {
        const swipeThreshold = 50;
        const diff = this.touchStartX - this.touchEndX;

        if (Math.abs(diff) > swipeThreshold) {
            if (diff > 0) {
                // –°–≤–∞–π–ø –≤–ª–µ–≤–æ - —Å–ª–µ–¥—É—é—â–∏–π —Å–ª–∞–π–¥
                this.scrollNext();
            } else {
                // –°–≤–∞–π–ø –≤–ø—Ä–∞–≤–æ - –ø—Ä–µ–¥—ã–¥—É—â–∏–π —Å–ª–∞–π–¥
                this.scrollPrev();
            }
        }
    }

    updateActiveSlide() {
        // –ü–æ–ª—É—á–∞–µ–º –≥—Ä–∞–Ω–∏—Ü—ã –∫–∞—Ä—É—Å–µ–ª–∏
        const carouselRect = this.carousel.getBoundingClientRect();
        const carouselLeft = carouselRect.left;

        // –ù–∞—Ö–æ–¥–∏–º —Å–ª–∞–π–¥, –∫–æ—Ç–æ—Ä—ã–π –±–ª–∏–∂–µ –≤—Å–µ–≥–æ –∫ –ª–µ–≤–æ–º—É –∫—Ä–∞—é –∫–∞—Ä—É—Å–µ–ª–∏
        let activeSlideIndex = 0;
        let minDistance = Infinity;

        this.slides.forEach((slide, index) => {
            const slideRect = slide.getBoundingClientRect();
            const slideLeft = slideRect.left;

            // –†–∞—Å—Å—Ç–æ—è–Ω–∏–µ –æ—Ç –ª–µ–≤–æ–≥–æ –∫—Ä–∞—è —Å–ª–∞–π–¥–∞ –¥–æ –ª–µ–≤–æ–≥–æ –∫—Ä–∞—è –∫–∞—Ä—É—Å–µ–ª–∏
            const distance = Math.abs(slideLeft - carouselLeft);

            if (distance < minDistance) {
                minDistance = distance;
                activeSlideIndex = index;
            }
        });

        // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∞–∫—Ç–∏–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –¥–æ 3 (–≤—Å–µ–≥–æ 4 —Å—Ç—Ä–∞–Ω–∏—Ü—ã: 0, 1, 2, 3)
        const activePage = Math.min(activeSlideIndex, 3);
        this.currentIndex = activePage;

        // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ—á–∫–∏ (–≤—Å–µ–≥–æ 4 —Ç–æ—á–∫–∏)
        const dots = this.dotsContainer.querySelectorAll('.features-dot');
        dots.forEach((dot, index) => {
            dot.classList.remove('active');
            if (index === this.currentIndex) {
                dot.classList.add('active');
            }
        });

        // –û–±–Ω–æ–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏
        this.prevBtn.disabled = this.currentIndex === 0;
        this.nextBtn.disabled = this.currentIndex >= 3;
    }

    getSlidesPerView() {
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–∫–æ–ª—å–∫–æ —Å–ª–∞–π–¥–æ–≤ –≤–∏–¥–Ω–æ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ
        const carouselWidth = this.carousel.offsetWidth;
        const slideWidth = this.slides[0].offsetWidth;
        return Math.floor(carouselWidth / slideWidth);
    }
}

// ========================================
// –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –∏–Ω—Ç–µ—Ä–µ—Å–∞ –∫ —Ñ—É–Ω–∫—Ü–∏—è–º
// ========================================

class FeatureInterestTracker {
    constructor() {
        this.interestData = {};
        this.init();
    }

    init() {
        // –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ –∫–Ω–æ–ø–∫–∏ "–ñ–¥—É"
        const interestButtons = document.querySelectorAll('.feature-interest-btn');

        interestButtons.forEach((button, index) => {
            button.addEventListener('click', (e) => {
                e.stopPropagation();
                this.handleInterestClick(button, index);
            });
        });
    }

    handleInterestClick(button, index) {
        const featureTitle = button.closest('.feature-slide-content').querySelector('h3').textContent;
        const isAlreadyInterested = button.classList.contains('interested');
        const textSpan = button.querySelector('span');

        if (!isAlreadyInterested) {
            // –û—Ç–º–µ—á–∞–µ–º –∏–Ω—Ç–µ—Ä–µ—Å
            button.classList.add('interested');
            if (textSpan) {
                textSpan.textContent = '–ñ–¥—É!';
            }

            // –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º –∏–Ω—Ç–µ—Ä–µ—Å
            this.trackInterest(featureTitle, index);

            console.log(`üìä –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–∏–Ω—Ç–µ—Ä–µ—Å–æ–≤–∞–ª—Å—è —Ñ—É–Ω–∫—Ü–∏–µ–π: "${featureTitle}"`);
        } else {
            // –£–±–∏—Ä–∞–µ–º –∏–Ω—Ç–µ—Ä–µ—Å
            button.classList.remove('interested');
            if (textSpan) {
                textSpan.textContent = '–ñ–¥—É';
            }
        }
    }

    trackInterest(featureTitle, index) {
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –æ–± –∏–Ω—Ç–µ—Ä–µ—Å–µ
        if (!this.interestData[featureTitle]) {
            this.interestData[featureTitle] = {
                clicks: 0,
                firstClickTime: new Date().toISOString(),
                index: index
            };
        }

        this.interestData[featureTitle].clicks += 1;
        this.interestData[featureTitle].lastClickTime = new Date().toISOString();

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ –∞–Ω–∞–ª–∏—Ç–∏–∫—É
        this.sendAnalytics(featureTitle, index);

        // –í—ã–≤–æ–¥–∏–º —Ç–µ–∫—É—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤ –∫–æ–Ω—Å–æ–ª—å (–¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏)
        console.log('üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏–Ω—Ç–µ—Ä–µ—Å–∞ –∫ —Ñ—É–Ω–∫—Ü–∏—è–º:', this.interestData);
    }

    sendAnalytics(featureTitle, index) {
        // –ü—Ä–∏–º–µ—Ä –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å Google Analytics
        if (typeof gtag !== 'undefined') {
            gtag('event', 'feature_interest', {
                'event_category': 'Features',
                'event_label': featureTitle,
                'feature_index': index
            });
        }

        // –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –Ø–Ω–¥–µ–∫—Å.–ú–µ—Ç—Ä–∏–∫–æ–π
        if (typeof ym !== 'undefined') {
            ym(104428361, 'reachGoal', 'feature_interest', {
                feature: featureTitle,
                feature_index: index
            });
        }
        console.log('üìä –ò–Ω—Ç–µ—Ä–µ—Å –∫ —Ñ—É–Ω–∫—Ü–∏–∏:', featureTitle);

        // –ú–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –Ω–∞ —Å–≤–æ–π —Å–µ—Ä–≤–µ—Ä
        /*
        fetch('/api/track-feature-interest', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                feature: featureTitle,
                index: index,
                timestamp: new Date().toISOString()
            })
        });
        */
    }

    // –ú–µ—Ç–æ–¥ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    getInterestStats() {
        return this.interestData;
    }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç—Ä–µ–∫–µ—Ä–∞ –∏–Ω—Ç–µ—Ä–µ—Å–∞ –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ DOM
document.addEventListener('DOMContentLoaded', () => {
    window.featureTracker = new FeatureInterestTracker();
});

// ========================================
// –¢–∞–π–º–µ—Ä –æ–±—Ä–∞—Ç–Ω–æ–≥–æ –æ—Ç—Å—á–µ—Ç–∞
// ========================================

class CountdownTimer {
    constructor(targetDate) {
        this.targetDate = new Date(targetDate).getTime();
        this.daysElement = document.getElementById('days');
        this.hoursElement = document.getElementById('hours');
        this.minutesElement = document.getElementById('minutes');
        this.secondsElement = document.getElementById('seconds');
        this.timerElement = document.getElementById('countdownTimer');

        if (!this.daysElement || !this.hoursElement || !this.minutesElement || !this.secondsElement) {
            return;
        }

        this.init();
    }

    init() {
        // –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–∞–π–º–µ—Ä–∞
        this.updateTimer();

        // –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞–∂–¥—É—é —Å–µ–∫—É–Ω–¥—É
        this.interval = setInterval(() => this.updateTimer(), 1000);
    }

    updateTimer() {
        const now = new Date().getTime();
        const distance = this.targetDate - now;

        // –ï—Å–ª–∏ –≤—Ä–µ–º—è –≤—ã—à–ª–æ
        if (distance < 0) {
            clearInterval(this.interval);
            this.showLaunchMessage();
            return;
        }

        // –í—ã—á–∏—Å–ª—è–µ–º –¥–Ω–∏, —á–∞—Å—ã, –º–∏–Ω—É—Ç—ã –∏ —Å–µ–∫—É–Ω–¥—ã
        const days = Math.floor(distance / (1000 * 60 * 60 * 24));
        const hours = Math.floor((distance % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60));
        const minutes = Math.floor((distance % (1000 * 60 * 60)) / (1000 * 60));
        const seconds = Math.floor((distance % (1000 * 60)) / 1000);

        // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        this.daysElement.textContent = this.formatNumber(days);
        this.hoursElement.textContent = this.formatNumber(hours);
        this.minutesElement.textContent = this.formatNumber(minutes);
        this.secondsElement.textContent = this.formatNumber(seconds);

        // –î–æ–±–∞–≤–ª—è–µ–º –∞–Ω–∏–º–∞—Ü–∏—é –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–µ–∫—É–Ω–¥
        this.secondsElement.style.animation = 'none';
        setTimeout(() => {
            this.secondsElement.style.animation = 'pulse 0.5s ease';
        }, 10);
    }

    formatNumber(num) {
        return num < 10 ? '0' + num : num;
    }

    showLaunchMessage() {
        if (this.timerElement) {
            this.timerElement.innerHTML = `
                <div class="countdown-launch">
                    <div class="launch-icon">üéâ</div>
                    <h3>–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–ø—É—â–µ–Ω–æ!</h3>
                    <p>–°–∫–∞—á–∞–π –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å</p>
                </div>
            `;
        }
    }

    destroy() {
        if (this.interval) {
            clearInterval(this.interval);
        }
    }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç–∞–π–º–µ—Ä–∞ –æ–±—Ä–∞—Ç–Ω–æ–≥–æ –æ—Ç—Å—á–µ—Ç–∞
document.addEventListener('DOMContentLoaded', () => {
    // –î–∞—Ç–∞ –∑–∞–ø—É—Å–∫–∞: 10 –Ω–æ—è–±—Ä—è 2025, 00:00:00
    const launchDate = 'November 10, 2025 00:00:00';
    window.countdownTimer = new CountdownTimer(launchDate);
});

// ========================================
// Cookie Notice
// ========================================

class CookieNotice {
    constructor() {
        this.cookieNotice = document.getElementById('cookieNotice');
        this.acceptButton = document.getElementById('cookieAccept');
        this.cookieName = 'cookie_consent';
        this.cookieExpireDays = 365;

        if (!this.cookieNotice || !this.acceptButton) return;

        this.init();
    }

    init() {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª–æ –ª–∏ —É–∂–µ –¥–∞–Ω–æ —Å–æ–≥–ª–∞—Å–∏–µ
        if (!this.getCookie(this.cookieName)) {
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –±–∞–Ω–Ω–µ—Ä —Å –Ω–µ–±–æ–ª—å—à–æ–π –∑–∞–¥–µ—Ä–∂–∫–æ–π –¥–ª—è –ª—É—á—à–µ–≥–æ UX
            setTimeout(() => {
                this.showNotice();
            }, 1000);
        }

        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ü–æ–Ω—è—Ç–Ω–æ"
        this.acceptButton.addEventListener('click', () => {
            this.acceptCookies();
        });
    }

    showNotice() {
        this.cookieNotice.classList.add('show');
    }

    hideNotice() {
        this.cookieNotice.classList.remove('show');
    }

    acceptCookies() {
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–≥–ª–∞—Å–∏–µ –≤ cookie
        this.setCookie(this.cookieName, 'accepted', this.cookieExpireDays);

        // –°–∫—Ä—ã–≤–∞–µ–º –±–∞–Ω–Ω–µ—Ä
        this.hideNotice();

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏–µ –≤ –Ø–Ω–¥–µ–∫—Å.–ú–µ—Ç—Ä–∏–∫—É
        if (typeof ym !== 'undefined') {
            ym(104428361, 'reachGoal', 'cookie_accepted');
        }
        console.log('‚úì –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–∏–Ω—è–ª –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ cookies');
    }

    setCookie(name, value, days) {
        const date = new Date();
        date.setTime(date.getTime() + (days * 24 * 60 * 60 * 1000));
        const expires = 'expires=' + date.toUTCString();
        document.cookie = name + '=' + value + ';' + expires + ';path=/';
    }

    getCookie(name) {
        const nameEQ = name + '=';
        const cookies = document.cookie.split(';');

        for (let i = 0; i < cookies.length; i++) {
            let cookie = cookies[i];
            while (cookie.charAt(0) === ' ') {
                cookie = cookie.substring(1, cookie.length);
            }
            if (cookie.indexOf(nameEQ) === 0) {
                return cookie.substring(nameEQ.length, cookie.length);
            }
        }
        return null;
    }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è cookie notice
document.addEventListener('DOMContentLoaded', () => {
    window.cookieNotice = new CookieNotice();
});

// ========================================
// –ú–æ–±–∏–ª—å–Ω–æ–µ –º–µ–Ω—é
// ========================================

class MobileMenu {
    constructor() {
        this.menuBtn = document.getElementById('mobileMenuBtn');
        this.menu = document.getElementById('mobileMenu');
        this.overlay = document.getElementById('mobileMenuOverlay');
        this.menuLinks = document.querySelectorAll('.mobile-menu-link');

        if (!this.menuBtn || !this.menu || !this.overlay) return;

        this.isOpen = false;
        this.init();
    }

    init() {
        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é
        this.menuBtn.addEventListener('click', () => this.toggle());

        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ–≤–µ—Ä–ª–µ—è
        this.overlay.addEventListener('click', () => this.close());

        // –ó–∞–∫—Ä—ã–≤–∞–µ–º –º–µ–Ω—é –ø—Ä–∏ –∫–ª–∏–∫–µ –Ω–∞ —Å—Å—ã–ª–∫—É
        this.menuLinks.forEach(link => {
            link.addEventListener('click', () => {
                // –î–∞–µ–º –≤—Ä–µ–º—è –¥–ª—è –ø–ª–∞–≤–Ω–æ–π –ø—Ä–æ–∫—Ä—É—Ç–∫–∏
                setTimeout(() => this.close(), 300);
            });
        });

        // –ó–∞–∫—Ä—ã–≤–∞–µ–º –º–µ–Ω—é –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ Escape
        document.addEventListener('keydown', (e) => {
            if (e.key === 'Escape' && this.isOpen) {
                this.close();
            }
        });

        // –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º —Å–∫—Ä–æ–ª–ª body –∫–æ–≥–¥–∞ –º–µ–Ω—é –æ—Ç–∫—Ä—ã—Ç–æ
        this.menu.addEventListener('touchmove', (e) => {
            if (this.isOpen) {
                e.stopPropagation();
            }
        });
    }

    toggle() {
        if (this.isOpen) {
            this.close();
        } else {
            this.open();
        }
    }

    open() {
        this.isOpen = true;
        this.menuBtn.classList.add('active');
        this.menu.classList.add('active');
        this.overlay.classList.add('active');
        document.body.style.overflow = 'hidden'; // –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º —Å–∫—Ä–æ–ª–ª

        // –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º –æ—Ç–∫—Ä—ã—Ç–∏–µ –º–æ–±–∏–ª—å–Ω–æ–≥–æ –º–µ–Ω—é –≤ –Ø–Ω–¥–µ–∫—Å.–ú–µ—Ç—Ä–∏–∫–µ
        if (typeof ym !== 'undefined') {
            ym(104428361, 'reachGoal', 'mobile_menu_opened');
        }
        console.log('üìä –û—Ç–∫—Ä—ã—Ç–æ –º–æ–±–∏–ª—å–Ω–æ–µ –º–µ–Ω—é');
    }

    close() {
        this.isOpen = false;
        this.menuBtn.classList.remove('active');
        this.menu.classList.remove('active');
        this.overlay.classList.remove('active');
        document.body.style.overflow = ''; // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–∫—Ä–æ–ª–ª
    }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–±–∏–ª—å–Ω–æ–≥–æ –º–µ–Ω—é
document.addEventListener('DOMContentLoaded', () => {
    window.mobileMenu = new MobileMenu();
});

// ========================================
// –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –ø–µ—Ä–µ—Ö–æ–¥–∞ –≤ Telegram
// ========================================

document.addEventListener('DOMContentLoaded', () => {
    const telegramBtn = document.querySelector('.telegram-btn');

    if (telegramBtn) {
        telegramBtn.addEventListener('click', () => {
            // –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º –ø–µ—Ä–µ—Ö–æ–¥ –≤ Telegram –≤ –Ø–Ω–¥–µ–∫—Å.–ú–µ—Ç—Ä–∏–∫–µ
            if (typeof ym !== 'undefined') {
                ym(104428361, 'reachGoal', 'telegram_click', {
                    source: 'subscribe_section'
                });
            }
            console.log('üìä –ü–µ—Ä–µ—Ö–æ–¥ –≤ Telegram');
        });
    }
});

// ========================================
// –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ä–∞–∑–¥–µ–ª–æ–≤
// ========================================

const sectionObserverOptions = {
    threshold: 0.5, // –°—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç, –∫–æ–≥–¥–∞ 50% —Å–µ–∫—Ü–∏–∏ –≤–∏–¥–∏–º–æ
    rootMargin: '0px'
};

const sectionObserver = new IntersectionObserver((entries) => {
    entries.forEach(entry => {
        if (entry.isIntersecting) {
            const sectionId = entry.target.id || entry.target.className;

            // –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º –ø—Ä–æ—Å–º–æ—Ç—Ä —Å–µ–∫—Ü–∏–∏ –≤ –Ø–Ω–¥–µ–∫—Å.–ú–µ—Ç—Ä–∏–∫–µ
            if (typeof ym !== 'undefined' && sectionId) {
                ym(104428361, 'reachGoal', 'section_viewed', {
                    section_id: sectionId
                });
                console.log('üìä –ü—Ä–æ—Å–º–æ—Ç—Ä —Å–µ–∫—Ü–∏–∏:', sectionId);
            }
        }
    });
}, sectionObserverOptions);

// –ù–∞–±–ª—é–¥–∞–µ–º –∑–∞ –æ—Å–Ω–æ–≤–Ω—ã–º–∏ —Å–µ–∫—Ü–∏—è–º–∏
document.addEventListener('DOMContentLoaded', () => {
    const sections = document.querySelectorAll('.hero, .familiar, .features, .faq, .subscribe-section, .app-stores-section');
    sections.forEach(section => sectionObserver.observe(section));
});
